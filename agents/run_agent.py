# # Code Generated by Sidekick is for learning and experimentation purposes only.

# import pandas as pd
# from data.data_fetcher import fetch_stock_data
# from data.indicator_analysis import calculate_all_indicators
# from data.signal_generator import ComprehensiveSignalGenerator

# # import your agent (this class should be in day_trading_agent.py)
# from agents.day_trading_agent import ModularDayTradingAgent

# if __name__ == "__main__":
#     # Parameters -- adjust as needed
#     symbol = "AAPL"
#     start = "2025-09-01"
#     end = "2025-10-18"
#     timeframe = "hour"   # Supports: "minute", "hour", "day"

#     # Step 1: Fetch raw data
#     df = fetch_stock_data(symbol, start, end, timeframe)
#     df.columns = [col.lower() for col in df.columns]  # Standardize column names
#     print("df columns (post fetch):", list(df.columns))

#     # Step 2: Validate required columns
#     required_cols = ["open", "high", "low", "close", "volume"]
#     for col in required_cols:
#         if col not in df.columns:
#             raise Exception(f"Missing required column: {col}")

#     # Step 3: Calculate indicators
#     indicators_df = calculate_all_indicators(df, timeframe=timeframe)
#     indicators_df['close'] = df['close']  # Ensure 'close' is present
#     # indicators_df['timestamp'] = df['timestamp']
#     # indicators_df['symbol'] = df['symbol']

#     # Step 4: Generate signals (adds Elliott/Fibonacci and more)
#     signal_gen = ComprehensiveSignalGenerator()
#     signals_list = signal_gen.analyze(indicators_df)
#     indicators_df['computed_signals'] = signals_list  # Each row now has rich signal dict

#     # (Optional) inspect output
#     print(indicators_df[['timestamp', 'symbol', 'computed_signals']].tail())

#     # Step 5: Run the decision logic in ModularDayTradingAgent
#     agent = ModularDayTradingAgent(
#         signals_df=signals_list,
#         symbol=symbol,
#         interval=timeframe,
#         threshold=1.0,  # Adjust for your strategy
#         verbose=True
#     )
#     trade_advice = agent.advise()

#     # Step 6: Output trading decision and context
#     print("Trade Advice:")
#     print(trade_advice)



import pandas as pd
from data.data_fetcher import fetch_stock_data
from data.indicator_analysis import calculate_all_indicators
from data.signal_generator import ComprehensiveSignalGenerator
from day_trading_agent import DayTradingAgent
import numpy as np

if __name__ == "__main__":
    # Parameters -- adjust as needed
    symbol = "SPY"
    start = "2025-09-01"
    end = "2025-10-18"
    timeframe = "15m"   # Supports: "minute", "hour", "day" based on your tf_map or indicator parameter mapping

    # Fetch data
    df = fetch_stock_data(symbol, start, end, timeframe)
    print("Raw columns:", df.columns)
    df.columns = [col.lower() for col in df.columns]

    # Validate key columns
    required_cols = ["open", "high", "low", "close", "volume"]
    for col in required_cols:
        if col not in df.columns:
            raise Exception(f"Missing required column: {col}")

    # Calculate indicators
    indicators_df = calculate_all_indicators(df, timeframe=timeframe)
    # Add "close" column for direct price referencing in signals
    indicators_df['close'] = df['close']

    # Print head for inspection
    print("Sample indicators head:\n", indicators_df.head())
    
    # Instantiate new signal generator class
    signal_gen = ComprehensiveSignalGenerator()

    # -- Analyze signals for all bars (optional, for batch output) --
    all_signals = signal_gen.analyze(indicators_df)
    print("All signals", all_signals)

    # Step 5: Run the decision logic in ModularDayTradingAgent
        # Initialize the trading agent
    agent = DayTradingAgent()
    # symbol = "ASML"
    # timeframe = "1d"
    account_balance = 10000

    # Get recommendation
    recommendation = agent.analyze_symbol(symbol, timeframe, indicators_df)
    
    # Generate report
    report = agent.generate_trading_report(symbol, timeframe, indicators_df)
    print("Trading Recommendation:", recommendation)
    print("Trading Report:", report)
    # agent = ModularDayTradingAgent(
    #     signals_df=all_signals,
    #     symbol=symbol,
    #     interval=timeframe,
    #     threshold=1.0,  # Adjust for your strategy
    #     verbose=True
    # )
    # trade_advice = agent.advise()

    # # Step 6: Output trading decision and context
    # print("Trade Advice:")
    # print(trade_advice)

    # print("\nSignals for all bars (first 2 shown for brevity):")
    # for i, sig in enumerate(all_signals[:2]):
    #     print(f"Bar {i}:", sig)
    
    # # -- Analyze signal for most recent bar --
    # last_signal = signal_gen.last_signal(indicators_df)
    # print("\nMost recent signal interpretation:")
    # print(last_signal)
